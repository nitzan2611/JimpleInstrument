goo (mut i0:int,mut i1:int) -> (res:int){
	example {[i0==1 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==1 && i1==3 && i2==32]
	-> i1 = i1 - i0;//i0==1 && i1==2 && i2==32]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==2 && i2==32]
	-> i2 = i2 - i0;//i0==1 && i1==2 && i2==31]
	-> i1 = i1 - i0;//i0==1 && i1==1 && i2==31]
	}
	example {[i0==2 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==2 && i1==3 && i2==31]
	-> i1 = i1 - i0;//i0==2 && i1==1 && i2==31]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==1 && i2==31]
	-> i0 = i0 - i1;//i0==1 && i1==1 && i2==31]
	}
	example {[i0==3 && i1==3]
	}
	example {[i0==4 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==4 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==1 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==1 && i1==3 && i2==32]
	-> i1 = i1 - i0;//i0==1 && i1==2 && i2==32]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==2 && i2==32]
	-> i2 = i2 - i0;//i0==1 && i1==2 && i2==31]
	-> i1 = i1 - i0;//i0==1 && i1==1 && i2==31]
	}
	example {[i0==5 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==5 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==2 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==2 && i1==3 && i2==31]
	-> i1 = i1 - i0;//i0==2 && i1==1 && i2==31]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==1 && i2==31]
	-> i0 = i0 - i1;//i0==1 && i1==1 && i2==31]
	}
	example {[i0==6 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==6 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==3 && i1==3 && i2==33]
	}
	example {[i0==7 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==7 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==4 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==4 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==1 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==1 && i1==3 && i2==32]
	-> i1 = i1 - i0;//i0==1 && i1==2 && i2==32]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==2 && i2==32]
	-> i2 = i2 - i0;//i0==1 && i1==2 && i2==31]
	-> i1 = i1 - i0;//i0==1 && i1==1 && i2==31]
	}
	example {[i0==8 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==8 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==5 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==5 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==2 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==2 && i1==3 && i2==31]
	-> i1 = i1 - i0;//i0==2 && i1==1 && i2==31]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==1 && i2==31]
	-> i0 = i0 - i1;//i0==1 && i1==1 && i2==31]
	}
	example {[i0==9 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==9 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==6 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==6 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==3 && i1==3 && i2==33]
	}
	example {[i0==10 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==10 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==7 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==7 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==4 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==4 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==1 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==1 && i1==3 && i2==32]
	-> i1 = i1 - i0;//i0==1 && i1==2 && i2==32]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==1 && i1==2 && i2==32]
	-> i2 = i2 - i0;//i0==1 && i1==2 && i2==31]
	-> i1 = i1 - i0;//i0==1 && i1==1 && i2==31]
	}
	example {[i0==11 && i1==3]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==11 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==8 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==8 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==5 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==5 && i1==3 && i2==33]
	-> i0 = i0 - i1;//i0==2 && i1==3 && i2==33]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==3 && i2==33]
	-> i2 = i2 - i0;//i0==2 && i1==3 && i2==31]
	-> i1 = i1 - i0;//i0==2 && i1==1 && i2==31]
	-> i0 = staticinvoke <TestInvoke: int foo(int)>(i0);//i0==2 && i1==1 && i2==31]
	-> i0 = i0 - i1;//i0==1 && i1==1 && i2==31]
	}

}
